/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class Organization extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    workers(arg0: string): TransactionObject<string>;

    isOrganization(_organization: string): TransactionObject<boolean>;

    isWorker(_worker: string): TransactionObject<boolean>;

    initiateOwnershipTransfer(
      _proposedOwner: string
    ): TransactionObject<boolean>;

    completeOwnershipTransfer(): TransactionObject<boolean>;

    setAdmin(_admin: string): TransactionObject<boolean>;

    setWorker(
      _worker: string,
      _expirationHeight: number | string
    ): TransactionObject<void>;

    unsetWorker(_worker: string): TransactionObject<boolean>;

    owner(): TransactionObject<string>;
    proposedOwner(): TransactionObject<string>;
    admin(): TransactionObject<string>;
  };
  events: {
    OwnershipTransferInitiated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferCompleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AdminAddressChanged(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    WorkerSet(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    WorkerUnset(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
