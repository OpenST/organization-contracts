/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OrganizationContract
  extends Truffle.Contract<OrganizationInstance> {
  "new"(
    _owner: string | BigNumber,
    _admin: string | BigNumber,
    _workers: (string | BigNumber)[],
    _expirationHeight: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<OrganizationInstance>;
}

export interface OrganizationInterfaceContract
  extends Truffle.Contract<OrganizationInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<OrganizationInterfaceInstance>;
}

export interface OrganizedContract extends Truffle.Contract<OrganizedInstance> {
  "new"(
    _organization: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<OrganizedInstance>;
}

export interface TestSafeMathContract
  extends Truffle.Contract<TestSafeMathInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestSafeMathInstance>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  setCompleted(
    completed: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  upgrade(
    new_address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface OrganizationInstance extends Truffle.ContractInstance {
  workers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isOrganization(
    _organization: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWorker(
    _worker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initiateOwnershipTransfer(
    _proposedOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  completeOwnershipTransfer(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  setAdmin(
    _admin: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  setWorker(
    _worker: string | BigNumber,
    _expirationHeight: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unsetWorker(
    _worker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  proposedOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface OrganizationInterfaceInstance
  extends Truffle.ContractInstance {
  isOrganization(
    _organization: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWorker(
    _worker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface OrganizedInstance extends Truffle.ContractInstance {
  organization(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TestSafeMathInstance extends Truffle.ContractInstance {
  multiply(
    a: number | BigNumber | string,
    b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  subtract(
    a: number | BigNumber | string,
    b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  add(
    a: number | BigNumber | string,
    b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  result(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}
